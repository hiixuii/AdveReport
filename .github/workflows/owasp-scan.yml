name: OWASP Scan Workflow

on:
  workflow_dispatch:

jobs:
  run-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      # 1) Checkout full history for branch pushes
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Start OWASP scan
      - name: Trigger OWASP Scan
        id: trigger
        run: |
          RESPONSE=$(curl -s -X POST "http://34.135.194.57:28291/start_scan" \
            -H "Content-Type: application/json" \
            -d '{
              "options": {
                "categories": ["Jailbreak","OWASP1","OWASP2","OWASP3","OWASP4","OWASP5","OWASP6","OWASP7","OWASP8","OWASP9","OWASP10"],
                "quality_level": 0,
                "response_details_level": 0,
                "languages": "en",
                "attack_type": [0],
                "repeat_count": 1,
                "risk_categories": [],
                "custom_risk": null,
                "owasp_version": "2024"
              },
              "template": {"prefix": "", "postfix": "", "config_name": null},
              "restrictions": {
                "total_limit": null,
                "attack_type_limit": [null,null,null,null],
                "delete_duplicates": false
              },
              "model": {
                "provider": "Preconfigured models",
                "model_name": "echo",
                "model_type": "local",
                "custom_host": "",
                "api_key": ""
              },
              "files": {},
              "debug": true
            }')
          echo "SCAN_ID=$(echo \"$RESPONSE\" | jq -r '.id')" >> $GITHUB_ENV

      # 3) Poll until Done / Error
      - name: Wait for scan to finish
        timeout-minutes: 150
        run: |
          for i in {1..260}; do
            STATUS_RESPONSE=$(curl -s "http://34.135.194.57:28291/check_task" \
              -H "Content-Type: application/json" \
              -d "{\"id\":\"${SCAN_ID}\"}")
            STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')
            echo "Poll #$i: $STATUS"
            if [[ "$STATUS" == "Done" ]]; then
              REPORT_FILE=$(echo "$STATUS_RESPONSE" | jq -r '.Result')
              echo "REPORT_FILE=$REPORT_FILE" >> $GITHUB_ENV
              exit 0
            elif [[ "$STATUS" == "Error" ]]; then
              echo "❌ Scan errored"; exit 1
            fi
            sleep 30
          done
          echo "⏰ Timed out"; exit 1

      # 4) Download Excel report
      - name: Download Excel Report
        if: env.REPORT_FILE != ''
        run: |
          curl -fSL -o report.xlsx "http://34.135.194.57:28291/download-file/${REPORT_FILE}"
          echo "REPORT_FILE_PATH=report.xlsx" >> $GITHUB_ENV

      # 5) (Optional) Upload raw Excel
      - name: Upload OWASP Excel
        if: env.REPORT_FILE_PATH != ''
        uses: actions/upload-artifact@v4
        with:
          name: OWASP-Scan-Excel-Report
          path: report.xlsx

      # 6) Generate Allure JSON
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pandas openpyxl

      - name: Generate Allure JSON from Excel
        run: python .github/scripts/generate_allure_results.py
        env:
          REPORT_FILE_PATH: ${{ env.REPORT_FILE_PATH }}

      # 7) PRE‑CREATE the folders
      - name: Prepare Allure folders
        run: |
          mkdir -p allure-results
          mkdir -p allure-report
          mkdir -p allure-history

      # 8) Fetch last run’s history (first run will skip)
      - name: Download previous Allure history
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: allure-history
          fail-on-missing: false

      # 9) Generate & combine the HTML
      - name: Generate Allure HTML Report
        uses: simple-elf/allure-report-action@v1.8
        with:
          allure_results: allure-results
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 20

      # 10) Upload HTML + history as artifacts
      - name: Upload Allure HTML
        uses: actions/upload-artifact@v4
        with:
          name: Allure-HTML-Report
          path: allure-report/

      - name: Upload Allure History
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: allure-history/

      # 11) Deploy to `reports` branch for CDN hosting
      - name: Deploy Allure to ‘reports’ branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout --orphan reports
          git rm -rf .
          cp -r allure-report/* .
          git add .
          git commit -m "Deploy Allure report – run #${{ github.run_number }}"
          git push -f origin reports
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
