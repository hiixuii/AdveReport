name: OWASP Scan Workflow

permissions:
  contents: write      # for checkout + commits
  pages: write         # for deploying via actions-gh-pages
  id-token: write      # if you ever use OIDC

on:
  workflow_dispatch:

jobs:
  run-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      # 1) Checkout your code (needed for scanner + for later commits)
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Trigger OWASP scan
      - name: Trigger OWASP Scan
        id: trigger
        run: |
          RESPONSE=$(curl -sS -X POST "http://34.135.194.57:28291/start_scan" \
            -H "Content-Type: application/json" \
            --data-raw '{â€¦}')
          echo "Response payload: $RESPONSE"
          SCAN_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          [[ -n "$SCAN_ID" ]] || (echo "No scan ID" && exit 1)
          echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV

      # 3) Wait for scan to finish
      - name: Wait for scan to finish
        timeout-minutes: 150
        run: |
          for i in {1..260}; do
            S=$(curl -sS "http://34.135.194.57:28291/check_task" \
                 -H "Content-Type: application/json" \
                 -d "{\"id\":\"${SCAN_ID}\"}")
            STATUS=$(echo "$S" | jq -r '.status // empty')
            [[ "$STATUS" == "Done" ]] && {
              echo "REPORT_FILE=$(echo "$S" | jq -r '.Result // empty')" >> $GITHUB_ENV
              break
            }
            [[ "$STATUS" == "Error" ]] && { echo "Scan Error"; exit 1; }
            sleep 30
          done
          [[ -n "${REPORT_FILE}" ]] || { echo "Timed out"; exit 1; }

      # 4) Download the Excel
      - name: Download Excel Report
        if: env.REPORT_FILE != ''
        run: |
          curl -fSL -o report.xlsx "http://34.135.194.57:28291/download-file/${REPORT_FILE}"
          echo "REPORT_FILE_PATH=report.xlsx" >> $GITHUB_ENV

      # 5) (Optional) save raw Excel
      - name: Upload OWASP Excel
        if: env.REPORT_FILE_PATH != ''
        uses: actions/upload-artifact@v4
        with:
          name: OWASP-Scan-Excel-Report
          path: report.xlsx

      # 6) Generate Allure JSON
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Python deps
        run: pip install pandas openpyxl

      - name: Generate Allure JSON from Excel
        run: python .github/scripts/generate_allure_results.py "${REPORT_FILE_PATH}"
        env:
          REPORT_FILE_PATH: ${{ env.REPORT_FILE_PATH }}

      # 7) Prepare Allure folders
      - name: Create Allure dirs
        run: |
          mkdir -p allure-results
          mkdir -p allure-report

      # 8) Restore history from gh-pages
      - name: Checkout gh-pages for history
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0

      - name: Copy prior history
        run: |
          mkdir -p allure-results/history
          cp -r gh-pages/history/* allure-results/history/ || echo "no prior history"

      # 9) Generate HTML with merged history
      - name: Generate Allure HTML Report
        uses: simple-elf/allure-report-action@v1.8
        with:
          allure_results: allure-results
          allure_report: allure-report
          allure_history: allure-results/history
          keep_reports: 20

      # 10) (Optional) Upload HTML artifact
      - name: Upload Allure HTML
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # 11) Disable Jekyll & Deploy to GitHub Pages
      - name: Disable Jekyll
        run: touch allure-report/.nojekyll

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./allure-report
          keep_files: false
          force_orphan: true
